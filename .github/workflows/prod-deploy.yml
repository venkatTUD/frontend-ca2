name: Frontend Blue-Green Deployment to Production
on:
  push:
    branches: ["release/*"]
  pull_request:
    branches: ["release/*"]
env:
  IMAGE_NAME: receipt-frontend
  DOCKER_REGISTRY: docker.io
  GKE_CLUSTER_NAME: receipt-prod-cluster
  GKE_REGION: us-central1
  SERVICE_NAME: receipt-frontend-service
  NAMESPACE: prod
jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get short SHA
      id: sha
      run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

    - name: Debug repository contents
      run: |
        echo "Listing repository contents:"
        ls -la
        echo "Listing k8s/scripts directory:"
        ls -la k8s/scripts/ || echo "k8s/scripts/ directory not found"

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERID }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push frontend
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        push: true
        tags: venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build frontend (for PRs)
      if: github.event_name == 'pull_request'
      uses: docker/build-push-action@v6
      with:
        context: .
        file: Dockerfile
        push: false
        tags: venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: eadtud
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION

    - name: Initial Deployment Setup
      id: initial-setup
      run: |
        echo "Checking for existing frontend service..."
        if ! kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --ignore-not-found; then
          echo "Frontend service not found. Performing initial deployment setup."
          # Apply base configurations
          kubectl apply -k k8s/base -n ${{ env.NAMESPACE }}
          # Apply cert-manager configurations
          kubectl apply -f k8s/cert-manager/cluster-issuer.yaml
          # Apply production overlay
          kubectl apply -k k8s/overlays/prod -n ${{ env.NAMESPACE }}
          kubectl patch service ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -p '{"spec":{"selector":{"app":"receipt-frontend","env":"green"}}}'
          echo "Initial setup complete."
          echo "IS_INITIAL_SETUP=true" >> $GITHUB_ENV
        else
          echo "Frontend service found. Skipping initial setup."
          echo "IS_INITIAL_SETUP=false" >> $GITHUB_ENV
        fi

    - name: Determine active environment
      id: get-active-env
      run: |
        ACTIVE_ENV="green"
        if kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.env}' &> /dev/null; then
          SVC_SELECTOR_ENV=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.env}')
          if [ -n "$SVC_SELECTOR_ENV" ]; then
            ACTIVE_ENV="$SVC_SELECTOR_ENV"
            echo "Detected active environment: $ACTIVE_ENV"
          fi
        fi
        if [ "$ACTIVE_ENV" = "blue" ]; then
          echo "INACTIVE_ENV=green" >> $GITHUB_ENV
          echo "ACTIVE_ENV=blue" >> $GITHUB_ENV
        else
          echo "INACTIVE_ENV=blue" >> $GITHUB_ENV
          echo "ACTIVE_ENV=green" >> $GITHUB_ENV
        fi

    - name: Deploy to inactive environment (Subsequent Runs)
      if: env.IS_INITIAL_SETUP == 'false'
      run: |
        echo "Deploying to inactive environment: ${{ env.INACTIVE_ENV }}"
        cd k8s/overlays/prod
        kustomize edit set image venkatakurathitud/receipt-frontend=venkatakurathitud/receipt-frontend:${{ env.SHORT_SHA }}
        kubectl apply -k .
        echo "Deployment manifest updated for ${{ env.INACTIVE_ENV }}."

    - name: Setup jq for JSON parsing
      run: sudo apt-get install -y jq

    - name: Test and Scale Up Environment
      run: |
        TARGET_ENV="${{ env.IS_INITIAL_SETUP == 'true' && 'green' || env.INACTIVE_ENV }}"
        echo "Scaling up deployment/receipt-frontend-$TARGET_ENV"
        kubectl scale deployment/receipt-frontend-$TARGET_ENV --replicas=1 -n ${{ env.NAMESPACE }}
        kubectl wait deployment/receipt-frontend-$TARGET_ENV -n ${{ env.NAMESPACE }} --for condition=available --timeout=300s
        kubectl wait --for=condition=ready pod -l app=receipt-frontend,env=$TARGET_ENV -n ${{ env.NAMESPACE }} --timeout=300s

    - name: Switch traffic to inactive environment (Subsequent Runs)
      if: env.IS_INITIAL_SETUP == 'false'
      run: |
        chmod +x ./k8s/scripts/switch-blue-green.sh
        ./k8s/scripts/switch-blue-green.sh ${{ env.NAMESPACE }} ${{ env.INACTIVE_ENV }} ${{ env.ACTIVE_ENV }} ${{ env.SHORT_SHA }}

    - name: Verify Deployment and TLS
      run: |
        # Get the NGINX Ingress IP
        INGRESS_IP=$(kubectl get svc ingress-nginx-controller -n ingress-nginx -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        FRONTEND_URL="https://${INGRESS_IP}.nip.io"
        
        echo "üîê Verifying TLS certificate..."
        # Wait for certificate to be ready
        kubectl wait --for=condition=ready certificate receipt-frontend-cert -n ${{ env.NAMESPACE }} --timeout=300s || echo "Certificate not ready yet"
        
        # Check certificate status
        echo "Certificate status:"
        kubectl get certificate -n ${{ env.NAMESPACE }}
        
        echo "üîç Verifying TLS connection..."
        echo | openssl s_client -connect ${INGRESS_IP}:443 -servername ${INGRESS_IP}.nip.io 2>/dev/null | openssl x509 -noout -dates || echo "‚ùå TLS cert check failed"

        echo "üåê Verifying application endpoints at $FRONTEND_URL..."
        curl --fail --retry 10 --retry-delay 10 --connect-timeout 15 --max-time 30 "$FRONTEND_URL" || echo "Warning: root check failed"
        curl --fail --retry 10 --retry-delay 10 --connect-timeout 15 --max-time 30 "$FRONTEND_URL/recipes" || echo "Warning: API check failed"
        curl --fail --retry 10 --retry-delay 10 --connect-timeout 15 --max-time 30 "$FRONTEND_URL/metrics" || echo "Warning: metrics check failed"
        
        echo "‚úÖ Deployment verification complete"
