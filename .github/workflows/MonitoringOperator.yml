name: Deploy Minimal Pod Monitoring
on:
  workflow_dispatch:

env:
  GKE_CLUSTER: receipt-dev-cluster
  GKE_REGION: us-central1
  NAMESPACE: dev

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Auth to GCP
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Setup gcloud
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --region $GKE_REGION

    # Prometheus Config
    - name: Deploy Prometheus Config
      run: |
        cat <<EOF | kubectl apply -n $NAMESPACE -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: prometheus-config
        data:
          prometheus.yml: |
            global:
              scrape_interval: 60s
              evaluation_interval: 60s
            
            scrape_configs:
            - job_name: 'frontend'
              metrics_path: '/metrics'
              kubernetes_sd_configs:
              - role: pod
              relabel_configs:
              - source_labels: [__meta_kubernetes_pod_label_app]
                regex: receipt-frontend
                action: keep
              - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                regex: ([^:]+)(?::\d+)?;(\d+)
                replacement: \${1}:\${2}
                target_label: __address__

            - job_name: 'backend'
              metrics_path: '/actuator/prometheus'
              kubernetes_sd_configs:
              - role: pod
              relabel_configs:
              - source_labels: [__meta_kubernetes_pod_label_app]
                regex: receipt-backend
                action: keep
              - source_labels: [__address__]
                target_label: __address__
                replacement: \${1}:9090
        EOF

    # Prometheus Deployment
    - name: Deploy Prometheus
      run: |
        cat <<EOF | kubectl apply -n $NAMESPACE -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: prometheus
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: prometheus
          template:
            metadata:
              labels:
                app: prometheus
            spec:
              containers:
              - name: prometheus
                image: prom/prometheus:v2.37.0
                args:
                - "--config.file=/etc/prometheus/prometheus.yml"
                - "--storage.tsdb.retention.time=12h"
                ports:
                - containerPort: 9090
                resources:
                  limits:
                    cpu: "200m"
                    memory: "200Mi"
                  requests:
                    cpu: "100m"
                    memory: "100Mi"
                volumeMounts:
                - name: config-volume
                  mountPath: /etc/prometheus
              volumes:
              - name: config-volume
                configMap:
                  name: prometheus-config
        EOF

    # Grafana Configuration
    - name: Deploy Grafana Config
      run: |
        cat <<EOF | kubectl apply -n $NAMESPACE -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: grafana-datasources
        data:
          prometheus.yaml: |-
            apiVersion: 1
            datasources:
            - name: Prometheus
              type: prometheus
              url: http://prometheus:9090
              access: proxy
              isDefault: true

        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: grafana-dashboard
          labels:
            grafana_dashboard: "1"
        data:
          pod-status.json: |-
            {
              "title": "Pod Status Monitor",
              "panels": [
                {
                  "title": "Frontend Pod Status",
                  "type": "stat",
                  "datasource": "Prometheus",
                  "gridPos": {"x": 0, "y": 0, "w": 12, "h": 6},
                  "targets": [{
                    "expr": "up{job='frontend'}",
                    "legendFormat": "{{pod}}"
                  }],
                  "options": {
                    "colorMode": "value",
                    "graphMode": "area",
                    "thresholds": {
                      "mode": "absolute",
                      "steps": [
                        {"color": "red", "value": null},
                        {"color": "green", "value": 1}
                      ]
                    }
                  }
                },
                {
                  "title": "Backend Pod Status",
                  "type": "stat",
                  "datasource": "Prometheus",
                  "gridPos": {"x": 0, "y": 6, "w": 12, "h": 6},
                  "targets": [{
                    "expr": "up{job='backend'}",
                    "legendFormat": "{{pod}}"
                  }],
                  "options": {
                    "colorMode": "value",
                    "graphMode": "area",
                    "thresholds": {
                      "mode": "absolute",
                      "steps": [
                        {"color": "red", "value": null},
                        {"color": "green", "value": 1}
                      ]
                    }
                  }
                }
              ],
              "refresh": "30s"
            }
        EOF

    # Grafana Deployment
    - name: Deploy Grafana
      run: |
        cat <<EOF | kubectl apply -n $NAMESPACE -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: grafana
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: grafana
          template:
            metadata:
              labels:
                app: grafana
            spec:
              containers:
              - name: grafana
                image: grafana/grafana:8.5.5
                ports:
                - containerPort: 3000
                resources:
                  limits:
                    cpu: "100m"
                    memory: "100Mi"
                  requests:
                    cpu: "50m"
                    memory: "50Mi"
                volumeMounts:
                - name: dashboards
                  mountPath: /etc/grafana/provisioning/dashboards
                  readOnly: true
                - name: config
                  mountPath: /etc/grafana/provisioning/datasources
                  readOnly: true
              volumes:
              - name: dashboards
                configMap:
                  name: grafana-dashboard
              - name: config
                configMap:
                  name: grafana-datasources

        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: grafana
        spec:
          ports:
          - port: 80
            targetPort: 3000
          selector:
            app: grafana
          type: LoadBalancer
        EOF

    - name: Get Grafana URL
      run: |
        echo "Grafana will be available at:"
        echo "http://$(kubectl get svc -n $NAMESPACE grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
        echo "Login with admin/admin"