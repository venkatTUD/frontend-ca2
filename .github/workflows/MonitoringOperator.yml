name: Deploy Targeted Monitoring to GKE Cluster
on:
  workflow_dispatch:

env:
  GKE_CLUSTER_NAME: receipt-dev-cluster
  GKE_REGION: us-central1
  NAMESPACE: dev

jobs:
  deploy-monitoring:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    - name: Set up gcloud
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: eadtud
        install_components: 'gke-gcloud-auth-plugin'

    - name: Configure kubectl
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION

    - name: Deploy Targeted Prometheus
      run: |
        cat <<EOF | kubectl apply -n $NAMESPACE -f -
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: prometheus-config
        data:
          prometheus.yml: |
            global:
              scrape_interval: 60s
              evaluation_interval: 60s
            
            scrape_configs:
              - job_name: 'app-pods'
                kubernetes_sd_configs:
                - role: pod
                relabel_configs:
                # Only scrape pods with prometheus.io/scrape=true
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                  action: keep
                  regex: true
                # Get the metrics path from annotation
                - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                  target_label: __metrics_path__
                  regex: (.+)
                # Get the port from annotation
                - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
                  action: replace
                  regex: ([^:]+)(?::\d+)?;(\d+)
                  replacement: \$1:\$2
                  target_label: __address__
                # Add pod name as label
                - source_labels: [__meta_kubernetes_pod_name]
                  target_label: pod
                # Add app name from labels
                - source_labels: [__meta_kubernetes_pod_label_app]
                  target_label: app
                # Add namespace
                - source_labels: [__meta_kubernetes_namespace]
                  target_label: namespace
        ---
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: prometheus
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: prometheus
          template:
            metadata:
              labels:
                app: prometheus
            spec:
              containers:
              - name: prometheus
                image: prom/prometheus:v2.37.0
                args:
                - "--config.file=/etc/prometheus/prometheus.yml"
                - "--storage.tsdb.retention.time=24h"
                ports:
                - containerPort: 9090
                resources:
                  limits:
                    cpu: "200m"
                    memory: "200Mi"
                  requests:
                    cpu: "100m"
                    memory: "100Mi"
                volumeMounts:
                - name: config-volume
                  mountPath: /etc/prometheus
              volumes:
              - name: config-volume
                configMap:
                  name: prometheus-config
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: prometheus
        spec:
          selector:
            app: prometheus
          ports:
          - port: 9090
            targetPort: 9090
          type: ClusterIP
        EOF

    - name: Deploy Grafana with App-Specific Dashboard
      run: |
        cat <<EOF | kubectl apply -n $NAMESPACE -f -
        apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: grafana
        spec:
          replicas: 1
          selector:
            matchLabels:
              app: grafana
          template:
            metadata:
              labels:
                app: grafana
            spec:
              containers:
              - name: grafana
                image: grafana/grafana:8.5.5
                ports:
                - containerPort: 3000
                resources:
                  limits:
                    cpu: "100m"
                    memory: "100Mi"
                  requests:
                    cpu: "50m"
                    memory: "50Mi"
                volumeMounts:
                - name: dashboards
                  mountPath: /etc/grafana/provisioning/dashboards
                  readOnly: true
                - name: config
                  mountPath: /etc/grafana/provisioning/datasources
                  readOnly: true
              volumes:
              - name: dashboards
                configMap:
                  name: grafana-dashboard
              - name: config
                configMap:
                  name: grafana-datasources
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: grafana-datasources
        data:
          prometheus.yaml: |-
            apiVersion: 1
            datasources:
            - name: Prometheus
              type: prometheus
              url: http://prometheus:9090
              access: proxy
              isDefault: true
        ---
        apiVersion: v1
        kind: ConfigMap
        metadata:
          name: grafana-dashboard
          labels:
            grafana_dashboard: "1"
        data:
          app-monitoring.json: |-
            {
              "title": "Application Monitoring",
              "panels": [
                {
                  "title": "Pod Status by Application",
                  "type": "stat",
                  "datasource": "Prometheus",
                  "targets": [{
                    "expr": "up{job=\"app-pods\"}",
                    "legendFormat": "{{app}}/{{pod}}"
                  }],
                  "options": {
                    "colorMode": "value",
                    "graphMode": "area",
                    "thresholds": {
                      "mode": "absolute",
                      "steps": [
                        { "color": "red", "value": null },
                        { "color": "green", "value": 1 }
                      ]
                    }
                  }
                },
                {
                  "title": "CPU Usage by Application",
                  "type": "timeseries",
                  "datasource": "Prometheus",
                  "targets": [{
                    "expr": "sum(rate(container_cpu_usage_seconds_total{job=\"app-pods\"}[1m])) by (app, pod)",
                    "legendFormat": "{{app}}/{{pod}}"
                  }],
                  "unit": "percentunit"
                },
                {
                  "title": "Memory Usage by Application",
                  "type": "timeseries",
                  "datasource": "Prometheus",
                  "targets": [{
                    "expr": "sum(container_memory_working_set_bytes{job=\"app-pods\"}) by (app, pod)",
                    "legendFormat": "{{app}}/{{pod}}"
                  }],
                  "unit": "bytes"
                }
              ]
            }
        ---
        apiVersion: v1
        kind: Service
        metadata:
          name: grafana
        spec:
          ports:
          - port: 80
            targetPort: 3000
          selector:
            app: grafana
          type: LoadBalancer
        EOF

    - name: Verify Deployment
      run: |
        kubectl get pods -n $NAMESPACE
        echo -e "\nGrafana will be available at:"
        echo "http://$(kubectl get svc -n $NAMESPACE grafana -o jsonpath='{.status.loadBalancer.ingress[0].ip}')"
        echo "Use admin/admin to login"
