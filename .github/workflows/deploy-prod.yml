name: Frontend Blue-Green Deployment to Prod
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  IMAGE_NAME: receipt-frontend
  DOCKER_REGISTRY: docker.io
  GKE_CLUSTER_NAME: receipt-cluster
  GKE_REGION: us-central1
  SERVICE_NAME: receipt-frontend-service
  NAMESPACE: prod
jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERID }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: eadtud
          install_components: 'gke-gcloud-auth-plugin'
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION
      - name: Determine active environment
        id: get-active-env
        run: |
          if kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --ignore-not-found; then
            ACTIVE_ENV=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.env}')
          else
            ACTIVE_ENV="green"
            echo "First-time deployment. Setting ACTIVE_ENV to green"
          fi
          echo "ACTIVE_ENV=$ACTIVE_ENV" >> $GITHUB_ENV
          if [ "$ACTIVE_ENV" = "blue" ]; then
            echo "INACTIVE_ENV=green" >> $GITHUB_ENV
          else
            echo "INACTIVE_ENV=blue" >> $GITHUB_ENV
          fi
      - name: Deploy to inactive environment
        run: |
          cd k8s/overlays/prod
          kustomize edit set image venkatakurathitud/receipt-frontend=venkatakurathitud/receipt-frontend:${{ env.SHORT_SHA }}
          kubectl apply -k .

        

      - name: Test inactive environment
        run: |
            echo "### Starting deployment verification ###"
            
            # 1. Verify deployment exists
            if ! kubectl get deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} --ignore-not-found; then
              echo "❌ ERROR: Deployment receipt-frontend-${{ env.INACTIVE_ENV }} not found!"
              echo "### Debugging info ###"
              kubectl get deployments -n ${{ env.NAMESPACE }}
              exit 1
            fi
        
            # 2. Wait for deployment to be available (up to 5 minutes)
            echo "⌛ Waiting for deployment to become available..."
            kubectl rollout status deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} --timeout=300s || {
              echo "❌ ERROR: Deployment timed out"
              echo "### Deployment details ###"
              kubectl describe deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }}
              echo "### Pods ###"
              kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o wide
              echo "### Pod logs ###"
              kubectl logs -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} --tail=50
              echo "### Events ###"
              kubectl get events -n ${{ env.NAMESPACE }} --sort-by=.metadata.creationTimestamp | grep -i "receipt-frontend-${{ env.INACTIVE_ENV }}"
              exit 1
            }
        
            # 3. Get running pod
            echo "🔍 Listing pods..."
            FRONTEND_POD=$(kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running)
            if [ -z "$FRONTEND_POD" ]; then
              echo "❌ ERROR: No running pod found"
              kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o wide
              exit 1
            fi
            echo "✅ Found pod: $FRONTEND_POD"
        
            # 4. Verify pod is fully ready
            echo "🔧 Checking pod readiness..."
            kubectl wait --for=condition=ready pod/$FRONTEND_POD -n ${{ env.NAMESPACE }} --timeout=120s || {
              echo "❌ ERROR: Pod failed to become ready"
              echo "### Pod description ###"
              kubectl describe pod/$FRONTEND_POD -n ${{ env.NAMESPACE }}
              echo "### Pod logs ###"
              kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }} --tail=100
              exit 1
            }
        
            # 5. Test backend connectivity
            echo "🔄 Testing backend connection..."
            BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath='{.items[0].metadata.name}' --field-selector=status.phase=Running)
            if [ -n "$BACKEND_POD" ]; then
              echo "ℹ️ Found backend pod: $BACKEND_POD"
              
              # Port-forward in background
              kubectl port-forward pod/$BACKEND_POD 3001:9090 -n ${{ env.NAMESPACE }} &
              BACKEND_PF_PID=$!
              sleep 5  # Wait for port-forward to establish
              
              if curl --retry 3 --retry-delay 5 --connect-timeout 5 --max-time 10 http://localhost:3001/health; then
                echo "✅ Backend health check passed"
              else
                echo "❌ ERROR: Backend health check failed"
                kill $BACKEND_PF_PID 2>/dev/null || true
                exit 1
              fi
              kill $BACKEND_PF_PID 2>/dev/null || true
            else
              echo "⚠️ No backend pod found, skipping backend tests"
            fi
        
            # 6. Test frontend
            echo "🚀 Testing frontend..."
            kubectl port-forward pod/$FRONTEND_POD 3000:22137 -n ${{ env.NAMESPACE }} &
            FRONTEND_PF_PID=$!
            sleep 5  # Wait for port-forward
            
            if curl --retry 3 --retry-delay 5 --connect-timeout 5 --max-time 10 http://localhost:3000/health; then
              echo "✅ Frontend health check passed"
            else
              echo "❌ ERROR: Frontend health check failed"
              kill $FRONTEND_PF_PID 2>/dev/null || true
              exit 1
            fi
            
            kill $FRONTEND_PF_PID 2>/dev/null || true
            echo "🎉 All tests completed successfully"
      
      - name: Switch traffic to inactive environment
        run: ./scripts/switch-blue-green.sh ${{ env.NAMESPACE }} ${{ env.INACTIVE_ENV }} ${{ env.ACTIVE_ENV }} ${{ env.SHORT_SHA }}
      
      - name: Verify deployment
        run: |
          EXTERNAL_IP=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          if [ "$EXTERNAL_IP" = "pending" ]; then
            echo "External IP not available, skipping verification"
            exit 0
          fi
          BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" || echo "pending")
          if [ "$BACKEND_POD" != "pending" ]; then
            kubectl port-forward pod/$BACKEND_POD 3001:9090 -n ${{ env.NAMESPACE }} &
            sleep 10
          fi
          GRAFANA_IP=$(kubectl get svc grafana-loadbalancer -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          GRAFANA_URL=$([ "$GRAFANA_IP" != "pending" ] && echo "http://${GRAFANA_IP}" || echo "pending")
          FRONTEND_URL="http://${EXTERNAL_IP}"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL" || echo "Warning: Frontend health check failed"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL/recipes" || echo "Warning: Frontend-backend API health check failed"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL/metrics" || echo "Warning: Frontend metrics endpoint check failed"
          [ "$BACKEND_POD" != "pending" ] && curl --fail --connect-timeout 5 --max-time 10 http://localhost:3001/actuator/prometheus || echo "Warning: Backend metrics endpoint check failed"
          echo "Grafana URL: $GRAFANA_URL"
          [ "$BACKEND_POD" != "pending" ] && kill %1 || true