name: Frontend Blue-Green Deployment to Prod
on:
  push:
    branches: ["release/**"]
  pull_request:
    branches: ["release/**"]
env:
  IMAGE_NAME: receipt-frontend
  DOCKER_REGISTRY: docker.io
  GKE_CLUSTER_NAME: receipt-prod-cluster
  GKE_REGION: us-central1
  SERVICE_NAME: receipt-frontend-service
  NAMESPACE: prod
jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Debug repository contents
        run: |
          echo "Listing repository contents:"
          ls -la
          echo "Listing k8s/scripts directory:"
          ls -la k8s/scripts/ || echo "k8s/scripts/ directory not found"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERID }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build frontend (for PRs)
        if: github.event_name == 'pull_request'
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: false
          tags: venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: eadtud
          install_components: 'gke-gcloud-auth-plugin'

      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION

      - name: Initial Deployment Setup
        id: initial-setup
        run: |
          echo "Checking for existing frontend service..."
          if ! kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --ignore-not-found; then
            echo "Frontend service not found. Performing initial deployment setup."
            kubectl apply -k k8s/base -n ${{ env.NAMESPACE }}
            # Set initial selector to green
            kubectl patch service ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -p '{"spec":{"selector":{"app":"receipt-frontend","env":"green"}}}'
            echo "Initial setup complete."
            echo "IS_INITIAL_SETUP=true" >> $GITHUB_ENV
          else
            echo "Frontend service found. Skipping initial setup."
            echo "IS_INITIAL_SETUP=false" >> $GITHUB_ENV
          fi

      - name: Determine active environment
        id: get-active-env
        run: |
          ACTIVE_ENV="green"
          if kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.env}' &> /dev/null; then
            SVC_SELECTOR_ENV=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.env}')
            if [ -n "$SVC_SELECTOR_ENV" ]; then
              ACTIVE_ENV="$SVC_SELECTOR_ENV"
              echo "Detected active environment: $ACTIVE_ENV"
            fi
          fi
          if [ "$ACTIVE_ENV" = "blue" ]; then
            echo "INACTIVE_ENV=green" >> $GITHUB_ENV
            echo "ACTIVE_ENV=blue" >> $GITHUB_ENV
          else
            echo "INACTIVE_ENV=blue" >> $GITHUB_ENV
            echo "ACTIVE_ENV=green" >> $GITHUB_ENV
          fi

      - name: Deploy to inactive environment (Subsequent Runs)
        if: env.IS_INITIAL_SETUP == 'false'
        run: |
          echo "Deploying to inactive environment: ${{ env.INACTIVE_ENV }}"
          cd k8s/overlays/prod
          kustomize edit set image venkatakurathitud/receipt-frontend=venkatakurathitud/receipt-frontend:${{ env.SHORT_SHA }}
          kubectl apply -k .
          echo "Deployment manifest updated for ${{ env.INACTIVE_ENV }}."

      - name: Setup jq for JSON parsing
        run: sudo apt-get install -y jq

      - name: Test and Scale Up Environment
        run: |
          echo "### Starting environment verification and scale up ###"
          TARGET_ENV=""
          if [ "${{ env.IS_INITIAL_SETUP }}" = "true" ]; then
            TARGET_ENV="green"
            echo "üÜï Initial setup - targeting green deployment."
          else
            TARGET_ENV="${{ env.INACTIVE_ENV }}"
            echo "üîÅ Normal deployment - targeting inactive environment (${{ env.INACTIVE_ENV }})."
          fi

          # Scale up the target environment
          echo "Scaling up deployment/receipt-frontend-$TARGET_ENV to 1 replica."
          kubectl scale deployment/receipt-frontend-$TARGET_ENV --replicas=1 -n ${{ env.NAMESPACE }}

          # Wait for the target deployment to become available
          echo "Waiting for deployment/receipt-frontend-$TARGET_ENV to become available..."
          kubectl wait deployment/receipt-frontend-$TARGET_ENV -n ${{ env.NAMESPACE }} --for condition=available --timeout=300s || {
            echo "‚ùå ERROR: Deployment receipt-frontend-$TARGET_ENV failed to become available."
            kubectl describe deployment receipt-frontend-$TARGET_ENV -n ${{ env.NAMESPACE }}
            exit 1
          }

          # Wait for pod to be ready
          echo "Waiting for pod to be ready for env=$TARGET_ENV..."
          kubectl wait --for=condition=ready pod -l app=receipt-frontend,env=$TARGET_ENV -n ${{ env.NAMESPACE }} --timeout=300s || {
            echo "‚ùå ERROR: No ready pods found for env=$TARGET_ENV."
            kubectl get pods -l app=receipt-frontend,env=$TARGET_ENV -n ${{ env.NAMESPACE }} -o wide
            exit 1
          }

          # Temporarily patch service selector to target the new environment for endpoint check
          echo "Patching service selector to env=$TARGET_ENV for endpoint check..."
          kubectl patch service ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -p "{\"spec\":{\"selector\":{\"app\":\"receipt-frontend\",\"env\":\"$TARGET_ENV\"}}}" || {
            echo "‚ùå ERROR: Failed to patch service selector."
            exit 1
          }

          # Wait for service endpoints to be ready
          echo "Waiting for service ${{ env.SERVICE_NAME }} to have endpoints..."
          for i in {1..30}; do
            ENDPOINTS=$(kubectl get endpoints ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.subsets[0].addresses}' 2>/dev/null)
            if [ -n "$ENDPOINTS" ]; then
              echo "‚úÖ Service endpoints ready: $ENDPOINTS"
              break
            elif [ "$i" -eq 30 ]; then
              echo "‚ùå ERROR: Service endpoints not ready after 30 attempts."
              kubectl describe service ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
              exit 1
            else
              echo "‚åõ Waiting for endpoints (attempt $i/30)..."
              sleep 10
            fi
          done

          # Health check via port-forward
          echo "Performing health check..."
          FRONTEND_POD=$(kubectl get pods -l app=receipt-frontend,env=$TARGET_ENV -n ${{ env.NAMESPACE }} --field-selector=status.phase=Running -o jsonpath='{.items[0].metadata.name}')
          LOCAL_PORT=$(python -c 'import socket; s=socket.socket(); s.bind(("", 0)); print(s.getsockname()[1]); s.close()')
          pkill -f "kubectl port-forward pod/$FRONTEND_POD" || true
          kubectl port-forward pod/$FRONTEND_POD $LOCAL_PORT:22137 -n ${{ env.NAMESPACE }} &
          PF_PID=$!
          sleep 10
          if ! ps -p $PF_PID > /dev/null; then
            echo "‚ùå ERROR: Port-forward failed."
            kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}
            exit 1
          fi
          HEALTH_CHECK_URL="http://localhost:$LOCAL_PORT/recipes"
          echo "Attempting health check on $HEALTH_CHECK_URL"
          if curl --retry 10 --retry-delay 10 --connect-timeout 15 --max-time 30 "$HEALTH_CHECK_URL"; then
            echo "‚úÖ Health check passed"
            kill $PF_PID
          else
            echo "‚ùå Health check failed"
            kill $PF_PID
            kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}
            kubectl describe pod $FRONTEND_POD -n ${{ env.NAMESPACE }}
            exit 1
          fi
          echo "üéâ Environment $TARGET_ENV verified successfully"

      - name: Switch traffic to inactive environment (Subsequent Runs)
        if: env.IS_INITIAL_SETUP == 'false'
        run: |
          echo "Switching traffic from ${{ env.ACTIVE_ENV }} to ${{ env.INACTIVE_ENV }}"
          # Verify script exists
          if [ ! -f ./k8s/scripts/switch-blue-green.sh ]; then
            echo "ERROR: switch-blue-green.sh not found in k8s/scripts/ directory!"
            ls -la k8s/scripts/
            exit 1
          fi
          # Ensure script is executable
          chmod +x ./k8s/scripts/switch-blue-green.sh
          ./k8s/scripts/switch-blue-green.sh ${{ env.NAMESPACE }} ${{ env.INACTIVE_ENV }} ${{ env.ACTIVE_ENV }} ${{ env.SHORT_SHA }}
          echo "Traffic switched."

      - name: Verify Deployment via External IP
        run: |
          echo "Verifying deployment via external IP."
          TARGET_ENV=""
          if [ "${{ env.IS_INITIAL_SETUP }}" = "true" ]; then
            TARGET_ENV="green"
            echo "üÜï Initial setup - verifying green environment."
          else
            TARGET_ENV="${{ env.INACTIVE_ENV }}"
            echo "üîÅ Normal deployment - verifying newly active environment ($TARGET_ENV)."
          fi

          # Wait for service endpoints to be ready
          echo "Waiting for service ${{ env.SERVICE_NAME }} to have endpoints for env=$TARGET_ENV..."
          for i in {1..30}; do
            ENDPOINTS=$(kubectl get endpoints ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.subsets[0].addresses}' 2>/dev/null)
            if [ -n "$ENDPOINTS" ]; then
              echo "‚úÖ Service endpoints ready: $ENDPOINTS"
              break
            elif [ "$i" -eq 30 ]; then
              echo "‚ùå ERROR: Service endpoints not ready after 30 attempts."
              kubectl describe service ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }}
              exit 1
            else
              echo "‚åõ Waiting for endpoints (attempt $i/30)..."
              sleep 10
            fi
          done

          EXTERNAL_IP=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          if [ "$EXTERNAL_IP" = "pending" ]; then
            echo "External IP not available, skipping external verification"
            exit 0
          fi

          FRONTEND_URL="http://${EXTERNAL_IP}"
          echo "Performing external health checks on $FRONTEND_URL..."
          curl --fail --retry 20 --retry-delay 15 --connect-timeout 15 --max-time 30 "$FRONTEND_URL" || { echo "Warning: Frontend root health check failed"; }
          curl --fail --retry 20 --retry-delay 15 --connect-timeout 15 --max-time 30 "$FRONTEND_URL/recipes" || { echo "Warning: Frontend-backend API health check failed"; }
          curl --fail --retry 20 --retry-delay 15 --connect-timeout 15 --max-time 30 "$FRONTEND_URL/metrics" || { echo "Warning: Frontend metrics endpoint check failed"; }
          echo "External verification complete."

      - name: Verify Deployment via Istio Gateway
        run: |
            FRONTEND_URL="https://<INGRESS_IP>.nip.io"
            echo "Performing health checks on $FRONTEND_URL..."
            curl --fail "$FRONTEND_URL" || echo "Warning: root check failed"
            curl --fail "$FRONTEND_URL/recipes" || echo "Warning: API check failed"
            curl --fail "$FRONTEND_URL/metrics" || echo "Warning: metrics check failed"