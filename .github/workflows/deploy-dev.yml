name: Frontend Blue-Green Deployment to Dev
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  IMAGE_NAME: receipt-frontend
  DOCKER_REGISTRY: docker.io
  GKE_CLUSTER_NAME: receipt-cluster
  GKE_REGION: us-central1
  SERVICE_NAME: receipt-frontend-service
  NAMESPACE: dev
  
jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERID }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: eadtud
          install_components: 'gke-gcloud-auth-plugin'
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION
          - name: Determine active environment
          id: get-active-env
          run: |
            ACTIVE_ENV=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.env}' 2>/dev/null || echo "blue")
            if [ "$ACTIVE_ENV" = "blue" ]; then
              echo "First-time deployment or blue is active. Setting ACTIVE_ENV to blue"
              INACTIVE_ENV="green"
            else
              echo "Green is active. Setting ACTIVE_ENV to green"
              INACTIVE_ENV="blue"
            fi
            echo "ACTIVE_ENV=$ACTIVE_ENV" >> $GITHUB_ENV
            echo "INACTIVE_ENV=$INACTIVE_ENV" >> $GITHUB_ENV
      - name: Deploy to inactive environment
        run: |
          cd k8s/overlays/dev
          kustomize edit set image venkatakurathitud/receipt-frontend=venkatakurathitud/receipt-frontend:${{ env.SHORT_SHA }}
          kubectl apply -k .
      - name: Test inactive environment
        run: |
          echo "Listing pods for inactive environment"
          kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o wide
          for attempt in {1..3}; do
            FRONTEND_POD=$(kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
            if [ -z "$FRONTEND_POD" ]; then
              echo "No running pod found for inactive environment (attempt $attempt)"
              kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o wide
              kubectl describe deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }}
              kubectl get events -n ${{ env.NAMESPACE }}
              sleep 10
              continue
            fi
            echo "Testing pod: $FRONTEND_POD"
            kubectl describe pod/$FRONTEND_POD -n ${{ env.NAMESPACE }}
            kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}
            kubectl describe svc receipt-backend-service -n ${{ env.NAMESPACE }}
            kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o wide
            kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}
            kubectl describe pod -l app=mongodb -n ${{ env.NAMESPACE }}
            kubectl logs -l app=mongodb -n ${{ env.NAMESPACE }}
            BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
            for i in {1..3}; do
              BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
              kubectl port-forward pod/$BACKEND_POD 3001:9090 -n ${{ env.NAMESPACE }} &
              BACKEND_PORT_FORWARD_PID=$!
              sleep 30
              if curl --connect-timeout 2 http://localhost:3001/recipes >/dev/null 2>&1; then
                echo "Backend port-forward successful"
                break
              else
                echo "Backend port-forward attempt $i failed, retrying..."
                kill $BACKEND_PORT_FORWARD_PID 2>/dev/null || true
                sleep 5
              fi
            done
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3001/recipes || { echo "Backend test failed"; kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}; kubectl logs -l app=mongodb -n ${{ env.NAMESPACE }}; }
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3001/actuator/prometheus || { echo "Backend metrics test failed"; kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}; }
            kill $BACKEND_PORT_FORWARD_PID 2>/dev/null || true
            for i in {1..3}; do
              FRONTEND_POD=$(kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
              kubectl port-forward pod/$FRONTEND_POD 3000:22137 -n ${{ env.NAMESPACE }} &
              FRONTEND_PORT_FORWARD_PID=$!
              sleep 30
              if curl --connect-timeout 2 http://localhost:3000 >/dev/null 2>&1; then
                echo "Frontend port-forward successful"
                break
              else
                echo "Frontend port-forward attempt $i failed, retrying..."
                kill $FRONTEND_PORT_FORWARD_PID 2>/dev/null || true
                sleep 5
              fi
            done
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3000 || { echo "Frontend test failed"; kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}; kubectl describe pod/$FRONTEND_POD -n ${{ env.NAMESPACE }}; }
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3000/recipes || { echo "Frontend-backend integration test failed"; kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}; kubectl describe svc receipt-backend-service -n ${{ env.NAMESPACE }}; kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}; kubectl logs -l app=mongodb -n ${{ env.NAMESPACE }}; }
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3000/metrics || { echo "Frontend metrics test failed"; kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}; }
            kill $FRONTEND_PORT_FORWARD_PID 2>/dev/null || true
            break
          done
      - name: Switch traffic to inactive environment
        run: ./scripts/switch-blue-green.sh ${{ env.NAMESPACE }} ${{ env.INACTIVE_ENV }} ${{ env.ACTIVE_ENV }} ${{ env.SHORT_SHA }}
      - name: Verify deployment
        run: |
          EXTERNAL_IP=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          if [ "$EXTERNAL_IP" = "pending" ]; then
            echo "External IP not available, skipping verification"
            exit 0
          fi
          BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" || echo "pending")
          if [ "$BACKEND_POD" != "pending" ]; then
            kubectl port-forward pod/$BACKEND_POD 3001:9090 -n ${{ env.NAMESPACE }} &
            sleep 10
          fi
          GRAFANA_IP=$(kubectl get svc grafana-loadbalancer -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          GRAFANA_URL=$([ "$GRAFANA_IP" != "pending" ] && echo "http://${GRAFANA_IP}" || echo "pending")
          FRONTEND_URL="http://${EXTERNAL_IP}"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL" || echo "Warning: Frontend health check failed"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL/recipes" || echo "Warning: Frontend-backend API health check failed"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL/metrics" || echo "Warning: Frontend metrics endpoint check failed"
          [ "$BACKEND_POD" != "pending" ] && curl --fail --connect-timeout 5 --max-time 10 http://localhost:3001/actuator/prometheus || echo "Warning: Backend metrics endpoint check failed"
          echo "Grafana URL: $GRAFANA_URL"
          [ "$BACKEND_POD" != "pending" ] && kill %1 || true