name: Frontend Blue-Green Deployment CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  IMAGE_NAME: receipt-frontend
  DOCKER_REGISTRY: docker.io
  GKE_CLUSTER_NAME: receipt-cluster   # 🔁 Replace with your actual cluster name
  GKE_REGION: us-central1              # 🔁 Replace if different
  GCP_ZONE: us-central1  # Replace with your actual GCP zone
  SERVICE_NAME: receipt-frontend-service
  NAMESPACE: default

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get short SHA
        id: sha
        run: echo "SHORT_SHA=$(git rev-parse --short HEAD)" >> $GITHUB_ENV

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERID }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push frontend
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }}
            venkatakurathitud/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # ✅ Authenticate to Google Cloud using a service account key
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v1
        with:
            credentials_json: ${{ secrets.GCP_CREDENTIALS }}
    
      # ✅ Set up gcloud CLI
      - name: Set up gcloud
        uses: google-github-actions/setup-gcloud@v1
        with:
            project_id: eadtud
            install_components: 'gke-gcloud-auth-plugin'
    

      # 👉 Configure kubectl using gcloud and get GKE kubeconfig
      - name: Configure kubectl
        run: |
          gcloud container clusters get-credentials $GKE_CLUSTER_NAME --region $GKE_REGION

      # - name: Set up GCP Credentials
      #   uses: google-github-actions/setup-gcloud@v2
      #   with:
      #     project_id: ${{ env.GCP_PROJECT_ID }}
      #     credentials_json: ${{ secrets.GCP_CREDENTIALS_JSON }}  # Add your GCP service account JSON key as a GitHub secret

      # - name: Authenticate to GKE
      #   run: |
      #     gcloud container clusters get-credentials ${{ env.GCP_CLUSTER_NAME }} --zone ${{ env.GCP_ZONE }} --project ${{ env.GCP_PROJECT_ID }}

      - name: Determine active environment
        id: get-active-env
        run: |
          # Check if the service exists before fetching its environment
          if kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --ignore-not-found; then
            ACTIVE_ENV=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.spec.selector.env}')
          else
            # If the service doesn't exist, assume first deployment and set default active environment
            ACTIVE_ENV="blue"
            echo "First-time deployment. Setting ACTIVE_ENV to blue"
          fi
          
          # Set INACTIVE_ENV based on the ACTIVE_ENV
          if [ "$ACTIVE_ENV" = "blue" ]; then
            echo "INACTIVE_ENV=green" >> $GITHUB_ENV
            echo "ACTIVE_ENV=blue" >> $GITHUB_ENV
          else
            echo "INACTIVE_ENV=blue" >> $GITHUB_ENV
            echo "ACTIVE_ENV=green" >> $GITHUB_ENV
          fi

      - name: Deploy to inactive environment
        run: |
          # Apply deployment YAML for the inactive environment (create or update)
          kubectl apply -f kubernetes/deployment-${{ env.INACTIVE_ENV }}.yaml -n ${{ env.NAMESPACE }} || { echo "Failed to apply deployment-${{ env.INACTIVE_ENV }}.yaml"; exit 1; }
          kubectl set image deployment/receipt-frontend-${{ env.INACTIVE_ENV }} receipt-frontend=venkatakurathitud/${{ env.IMAGE_NAME }}:${{ env.SHORT_SHA }} -n ${{ env.NAMESPACE }}
          kubectl scale deployment/receipt-frontend-${{ env.INACTIVE_ENV }} --replicas=1 -n ${{ env.NAMESPACE }}
          echo "Waiting for inactive environment to be ready..."
          kubectl wait --for=condition=available deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} --timeout=300s || { echo "Deployment not ready"; kubectl describe deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }}; exit 1; }
          kubectl rollout status deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }}

      - name: Test inactive environment
        run: |
          echo "Listing pods for inactive environment"
          kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o wide
          for attempt in {1..3}; do
            FRONTEND_POD=$(kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
            if [ -z "$FRONTEND_POD" ]; then
              echo "No running pod found for inactive environment (attempt $attempt)"
              kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o wide
              kubectl describe deployment/receipt-frontend-${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }}
              kubectl get events -n ${{ env.NAMESPACE }}
              sleep 10
              continue
            fi
            echo "Testing pod: $FRONTEND_POD"
            kubectl describe pod/$FRONTEND_POD -n ${{ env.NAMESPACE }}
            kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}
            kubectl describe svc receipt-backend-service -n ${{ env.NAMESPACE }}
            kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o wide
            kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}
            kubectl describe pod -l app=mongodb -n ${{ env.NAMESPACE }}
            kubectl logs -l app=mongodb -n ${{ env.NAMESPACE }}
            BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
            # Start backend port-forward with retry
            for i in {1..3}; do
              BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
              kubectl port-forward pod/$BACKEND_POD 3001:9090 -n ${{ env.NAMESPACE }} &
              BACKEND_PORT_FORWARD_PID=$!
              sleep 30
              if curl --connect-timeout 2 http://localhost:3001/recipes >/dev/null 2>&1; then
                echo "Backend port-forward successful"
                break
              else
                echo "Backend port-forward attempt $i failed, retrying..."
                kill $BACKEND_PORT_FORWARD_PID 2>/dev/null || true
                sleep 5
              fi
            done
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3001/recipes || { echo "Backend test failed"; kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}; kubectl logs -l app=mongodb -n ${{ env.NAMESPACE }}; }
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3001/actuator/prometheus || { echo "Backend metrics test failed"; kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}; }
            kill $BACKEND_PORT_FORWARD_PID 2>/dev/null || true
            # Start frontend port-forward with retry
            for i in {1..3}; do
              FRONTEND_POD=$(kubectl get pods -l app=receipt-frontend,env=${{ env.INACTIVE_ENV }} -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}" --field-selector=status.phase=Running)
              kubectl port-forward pod/$FRONTEND_POD 3000:22137 -n ${{ env.NAMESPACE }} &
              FRONTEND_PORT_FORWARD_PID=$!
              sleep 30
              if curl --connect-timeout 2 http://localhost:3000 >/dev/null 2>&1; then
                echo "Frontend port-forward successful"
                break
              else
                echo "Frontend port-forward attempt $i failed, retrying..."
                kill $FRONTEND_PORT_FORWARD_PID 2>/dev/null || true
                sleep 5
              fi
            done
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3000 || { echo "Frontend test failed"; kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}; kubectl describe pod/$FRONTEND_POD -n ${{ env.NAMESPACE }}; }
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3000/recipes || { echo "Frontend-backend integration test failed"; kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}; kubectl describe svc receipt-backend-service -n ${{ env.NAMESPACE }}; kubectl logs -l app=receipt-backend -n ${{ env.NAMESPACE }}; kubectl logs -
            curl --fail --connect-timeout 5 --max-time 10 http://localhost:3000/metrics || { echo "Frontend metrics test failed"; kubectl logs $FRONTEND_POD -n ${{ env.NAMESPACE }}; }
            kill $FRONTEND_PORT_FORWARD_PID 2>/dev/null || true
            break
          done

      - name: Switch traffic to inactive environment
        run: |
          # Only patch the service if the inactive environment is deployed
          if kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} --ignore-not-found; then
            kubectl patch svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -p "{\"spec\":{\"selector\":{\"app\":\"receipt-frontend\",\"env\":\"${{ env.INACTIVE_ENV }}\"}}}"
          else
            echo "Service not found, skipping traffic switch"
          fi
          kubectl patch hpa receipt-frontend -n ${{ env.NAMESPACE }} -p "{\"spec\":{\"scaleTargetRef\":{\"name\":\"receipt-frontend-${{ env.INACTIVE_ENV }}\"}}}" || echo "HPA not found, skipping update"
          kubectl scale deployment/receipt-frontend-${{ env.ACTIVE_ENV }} --replicas=0 -n ${{ env.NAMESPACE }}

      - name: Verify deployment
        run: |
          # Check if external IP is available
          EXTERNAL_IP=$(kubectl get svc ${{ env.SERVICE_NAME }} -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$EXTERNAL_IP" ]; then
            echo "External IP not available, skipping verification"
            exit 1
          fi
          # Proceed with the verification logic only if the external IP exists
          BACKEND_POD=$(kubectl get pods -l app=receipt-backend -n ${{ env.NAMESPACE }} -o jsonpath="{.items[0].metadata.name}")
          kubectl port-forward pod/$BACKEND_POD 3001:9090 -n ${{ env.NAMESPACE }} &
          sleep 10    

          # Grafana IP check
          GRAFANA_IP=$(kubectl get svc grafana-loadbalancer -n ${{ env.NAMESPACE }} -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "pending")
          if [ "$GRAFANA_IP" != "pending" ]; then
            GRAFANA_URL="http://${GRAFANA_IP}"
          else
            GRAFANA_URL="pending"
          fi
          # Frontend health checks
          FRONTEND_URL="http://${EXTERNAL_IP}:${NODE_PORT}"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL" || echo "Warning: Frontend health check failed"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL/recipes" || echo "Warning: Frontend-backend API health check failed"
          curl --fail --connect-timeout 5 --max-time 10 "$FRONTEND_URL/metrics" || echo "Warning: Frontend metrics endpoint check failed"
          curl --fail --connect-timeout 5 --max-time 10 http://localhost:3001/actuator/prometheus || echo "Warning: Backend metrics endpoint check failed"
          echo "Grafana URL: $GRAFANA_URL"
          kill %1